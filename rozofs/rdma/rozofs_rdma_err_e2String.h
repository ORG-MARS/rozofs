#ifndef __rozofs_rdma_err_e2String_h__
#define __rozofs_rdma_err_e2String_h__
#ifdef __cplusplus
extern "C" {
#endif /*__cplusplus*/
#include <strings.h>

/*___________________________________________________________________
 
   Generated by enum2String.py 
   Date : Friday 2019 September 13, 17:41:18
   Command line : 
 ../../tools/enum2String.py -n rozofs_rdma_err_e -f rozofs_rdma.h -c 14 -r

  ____________________________________________________________________
*/

/*_________________________________________________________________
 * Builds a string from an integer value supposed to be within
 * the enumerated list rozofs_rdma_err_e
 *
 * @param x : value from rozofs_rdma_err_e to translate into a string
 *
 * The input value is translated into a string deduced from the enum
 * definition. When the input value do not fit any of the predefined
 * values, "??" is returned
 *
 * @return A char pointer to the constant string or "??"
 *_________________________________________________________________*/ 
static inline char * rozofs_rdma_err_e2String (const rozofs_rdma_err_e x) {
  switch(x) {
    case ROZOFS_IBV_WC_SUCCESS                   : return("SUCCESS");
    case ROZOFS_IBV_WC_LOC_LEN_ERR               : return("LOC LEN ERR");
    case ROZOFS_IBV_WC_LOC_QP_OP_ERR             : return("LOC QP OP ERR");
    case ROZOFS_IBV_WC_LOC_EEC_OP_ERR            : return("LOC EEC OP ERR");
    case ROZOFS_IBV_WC_LOC_PROT_ERR              : return("LOC PROT ERR");
    case ROZOFS_IBV_WC_WR_FLUSH_ERR              : return("WR FLUSH ERR");
    case ROZOFS_IBV_WC_MW_BIND_ERR               : return("MW BIND ERR");
    case ROZOFS_IBV_WC_BAD_RESP_ERR              : return("BAD RESP ERR");
    case ROZOFS_IBV_WC_LOC_ACCESS_ERR            : return("LOC ACCESS ERR");
    case ROZOFS_IBV_WC_REM_INV_REQ_ERR           : return("REM INV REQ ERR");
    case ROZOFS_IBV_WC_REM_ACCESS_ERR            : return("REM ACCESS ERR");
    case ROZOFS_IBV_WC_REM_OP_ERR                : return("REM OP ERR");
    case ROZOFS_IBV_WC_RETRY_EXC_ERR             : return("RETRY EXC ERR");
    case ROZOFS_IBV_WC_RNR_RETRY_EXC_ERR         : return("RNR RETRY EXC ERR");
    case ROZOFS_IBV_WC_LOC_RDD_VIOL_ERR          : return("LOC RDD VIOL ERR");
    case ROZOFS_IBV_WC_REM_INV_RD_REQ_ERR        : return("REM INV RD REQ ERR");
    case ROZOFS_IBV_WC_REM_ABORT_ERR             : return("REM ABORT ERR");
    case ROZOFS_IBV_WC_INV_EECN_ERR              : return("INV EECN ERR");
    case ROZOFS_IBV_WC_INV_EEC_STATE_ERR         : return("INV EEC STATE ERR");
    case ROZOFS_IBV_WC_FATAL_ERR                 : return("FATAL ERR");
    case ROZOFS_IBV_WC_RESP_TIMEOUT_ERR          : return("RESP TIMEOUT ERR");
    case ROZOFS_IBV_WC_GENERAL_ERR               : return("GENERAL ERR");
    case ROZOFS_IBV_WC_MAX_ERR                   : return("MAX ERR");
    /* Unexpected value */
    default: return "??";
  }
}
/*_________________________________________________________________
 * Translate a string supposed to be within the enumerated list
 * rozofs_rdma_err_e to its integer value.
 *
 * @param s : the string to translate into an integer
 *
 * The input string is translated into its corresponding integer value.
 * When the input value do not fit any expected string -1 is returned.
 *
 * @return The integer value or -1
 *_________________________________________________________________*/ 
static inline int string2rozofs_rdma_err_e (const char * s) {
  if (strcasecmp(s,"SUCCESS")==0)  	return ROZOFS_IBV_WC_SUCCESS;
  if (strcasecmp(s,"LOC LEN ERR")==0)  	return ROZOFS_IBV_WC_LOC_LEN_ERR;
  if (strcasecmp(s,"LOC QP OP ERR")==0)  	return ROZOFS_IBV_WC_LOC_QP_OP_ERR;
  if (strcasecmp(s,"LOC EEC OP ERR")==0)  	return ROZOFS_IBV_WC_LOC_EEC_OP_ERR;
  if (strcasecmp(s,"LOC PROT ERR")==0)  	return ROZOFS_IBV_WC_LOC_PROT_ERR;
  if (strcasecmp(s,"WR FLUSH ERR")==0)  	return ROZOFS_IBV_WC_WR_FLUSH_ERR;
  if (strcasecmp(s,"MW BIND ERR")==0)  	return ROZOFS_IBV_WC_MW_BIND_ERR;
  if (strcasecmp(s,"BAD RESP ERR")==0)  	return ROZOFS_IBV_WC_BAD_RESP_ERR;
  if (strcasecmp(s,"LOC ACCESS ERR")==0)  	return ROZOFS_IBV_WC_LOC_ACCESS_ERR;
  if (strcasecmp(s,"REM INV REQ ERR")==0)  	return ROZOFS_IBV_WC_REM_INV_REQ_ERR;
  if (strcasecmp(s,"REM ACCESS ERR")==0)  	return ROZOFS_IBV_WC_REM_ACCESS_ERR;
  if (strcasecmp(s,"REM OP ERR")==0)  	return ROZOFS_IBV_WC_REM_OP_ERR;
  if (strcasecmp(s,"RETRY EXC ERR")==0)  	return ROZOFS_IBV_WC_RETRY_EXC_ERR;
  if (strcasecmp(s,"RNR RETRY EXC ERR")==0)  	return ROZOFS_IBV_WC_RNR_RETRY_EXC_ERR;
  if (strcasecmp(s,"LOC RDD VIOL ERR")==0)  	return ROZOFS_IBV_WC_LOC_RDD_VIOL_ERR;
  if (strcasecmp(s,"REM INV RD REQ ERR")==0)  	return ROZOFS_IBV_WC_REM_INV_RD_REQ_ERR;
  if (strcasecmp(s,"REM ABORT ERR")==0)  	return ROZOFS_IBV_WC_REM_ABORT_ERR;
  if (strcasecmp(s,"INV EECN ERR")==0)  	return ROZOFS_IBV_WC_INV_EECN_ERR;
  if (strcasecmp(s,"INV EEC STATE ERR")==0)  	return ROZOFS_IBV_WC_INV_EEC_STATE_ERR;
  if (strcasecmp(s,"FATAL ERR")==0)  	return ROZOFS_IBV_WC_FATAL_ERR;
  if (strcasecmp(s,"RESP TIMEOUT ERR")==0)  	return ROZOFS_IBV_WC_RESP_TIMEOUT_ERR;
  if (strcasecmp(s,"GENERAL ERR")==0)  	return ROZOFS_IBV_WC_GENERAL_ERR;
  if (strcasecmp(s,"MAX ERR")==0)  	return ROZOFS_IBV_WC_MAX_ERR;
  /* Unexpected value */
  return -1;
}

#ifdef	__cplusplus
}
#endif
#endif

