/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _MPROTO_H_RPCGEN
#define _MPROTO_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif

#include <rozofs/rozofs.h>

typedef uint32_t mp_uuid_t[ROZOFS_UUID_SIZE_NET];

enum mp_status_t {
	MP_SUCCESS = 0,
	MP_FAILURE = 1,
};
typedef enum mp_status_t mp_status_t;

struct mp_status_ret_t {
	mp_status_t status;
	union {
		int error;
	} mp_status_ret_t_u;
};
typedef struct mp_status_ret_t mp_status_ret_t;

struct mp_remove2_arg_t {
	uint16_t cid;
	uint8_t sid;
	uint8_t spare;
	mp_uuid_t fid;
};
typedef struct mp_remove2_arg_t mp_remove2_arg_t;

struct mp_remove_arg_t {
	uint16_t cid;
	uint8_t sid;
	mp_uuid_t fid;
};
typedef struct mp_remove_arg_t mp_remove_arg_t;

struct mp_stat_arg_t {
	uint16_t cid;
	uint8_t sid;
};
typedef struct mp_stat_arg_t mp_stat_arg_t;

struct mp_sstat_t {
	uint64_t size;
	uint64_t free;
};
typedef struct mp_sstat_t mp_sstat_t;

struct mp_size_rsp_t {
	uint64_t file_size_in_blocks;
	uint64_t allocated_sectors;
	uint32_t nb_chunk;
};
typedef struct mp_size_rsp_t mp_size_rsp_t;

struct mp_size_ret_t {
	mp_status_t status;
	union {
		int error;
		mp_size_rsp_t rsp;
	} mp_size_ret_t_u;
};
typedef struct mp_size_ret_t mp_size_ret_t;

struct mp_size_arg_t {
	uint16_t cid;
	uint8_t sid;
	uint8_t spare;
	mp_uuid_t fid;
};
typedef struct mp_size_arg_t mp_size_arg_t;

typedef char *mp_path_t;

struct mp_file_t {
	uint64_t sizeBytes;
	uint64_t modDate;
	uint64_t sectors;
	mp_path_t file_name;
};
typedef struct mp_file_t mp_file_t;

typedef struct {
	u_int mp_files_t_len;
	mp_file_t *mp_files_t_val;
} mp_files_t;

struct mp_locate_rsp_t {
	mp_files_t hdrs;
	mp_files_t chunks;
};
typedef struct mp_locate_rsp_t mp_locate_rsp_t;

struct mp_locate_ret_t {
	mp_status_t status;
	union {
		int error;
		mp_locate_rsp_t rsp;
	} mp_locate_ret_t_u;
};
typedef struct mp_locate_ret_t mp_locate_ret_t;

struct mp_locate_arg_t {
	uint16_t cid;
	uint8_t sid;
	uint8_t spare;
	mp_uuid_t fid;
};
typedef struct mp_locate_arg_t mp_locate_arg_t;

struct mp_stat_ret_t {
	mp_status_t status;
	union {
		mp_sstat_t sstat;
		int error;
	} mp_stat_ret_t_u;
};
typedef struct mp_stat_ret_t mp_stat_ret_t;

struct mp_io_address_t {
	uint32_t ipv4;
	uint32_t port;
};
typedef struct mp_io_address_t mp_io_address_t;

enum mp_storio_mode_t {
	MP_SINGLE = 0,
	MP_MULTIPLE = 1,
};
typedef enum mp_storio_mode_t mp_storio_mode_t;

struct mp_ports_t {
	enum mp_storio_mode_t mode;
	struct mp_io_address_t io_addr[STORAGE_NODE_PORTS_MAX];
};
typedef struct mp_ports_t mp_ports_t;

struct mp_ports_ret_t {
	mp_status_t status;
	union {
		struct mp_ports_t ports;
		int error;
	} mp_ports_ret_t_u;
};
typedef struct mp_ports_ret_t mp_ports_ret_t;

typedef struct mp_child_t *mp_children_t;

struct mp_child_t {
	mp_uuid_t fid;
	uint8_t layout;
	uint8_t bsize;
	uint8_t dist_set[ROZOFS_SAFE_MAX];
	mp_children_t next;
};
typedef struct mp_child_t mp_child_t;

struct bins_files_list_t {
	mp_children_t children;
	uint8_t eof;
	uint8_t device;
	uint16_t slice;
	uint8_t spare;
	uint64_t cookie;
};
typedef struct bins_files_list_t bins_files_list_t;

struct mp_list_bins_files_ret_t {
	mp_status_t status;
	union {
		bins_files_list_t reply;
		int error;
	} mp_list_bins_files_ret_t_u;
};
typedef struct mp_list_bins_files_ret_t mp_list_bins_files_ret_t;

struct mp_list_bins_files_arg_t {
	uint16_t cid;
	uint8_t sid;
	uint8_t rebuild_sid;
	uint8_t device;
	uint8_t spare;
	uint16_t slice;
	uint64_t cookie;
};
typedef struct mp_list_bins_files_arg_t mp_list_bins_files_arg_t;

#define MONITOR_PROGRAM 0x20000003
#define MONITOR_VERSION 1

#if defined(__STDC__) || defined(__cplusplus)
#define MP_NULL 0
extern  void * mp_null_1(void *, CLIENT *);
extern  void * mp_null_1_svc(void *, struct svc_req *);
#define MP_STAT 1
extern  mp_stat_ret_t * mp_stat_1(mp_stat_arg_t *, CLIENT *);
extern  mp_stat_ret_t * mp_stat_1_svc(mp_stat_arg_t *, struct svc_req *);
#define MP_REMOVE 2
extern  mp_status_ret_t * mp_remove_1(mp_remove_arg_t *, CLIENT *);
extern  mp_status_ret_t * mp_remove_1_svc(mp_remove_arg_t *, struct svc_req *);
#define MP_PORTS 3
extern  mp_ports_ret_t * mp_ports_1(void *, CLIENT *);
extern  mp_ports_ret_t * mp_ports_1_svc(void *, struct svc_req *);
#define MP_LIST_BINS_FILES 4
extern  mp_list_bins_files_ret_t * mp_list_bins_files_1(mp_list_bins_files_arg_t *, CLIENT *);
extern  mp_list_bins_files_ret_t * mp_list_bins_files_1_svc(mp_list_bins_files_arg_t *, struct svc_req *);
#define MP_REMOVE2 5
extern  mp_status_ret_t * mp_remove2_1(mp_remove2_arg_t *, CLIENT *);
extern  mp_status_ret_t * mp_remove2_1_svc(mp_remove2_arg_t *, struct svc_req *);
#define MP_SIZE 6
extern  mp_size_ret_t * mp_size_1(mp_size_arg_t *, CLIENT *);
extern  mp_size_ret_t * mp_size_1_svc(mp_size_arg_t *, struct svc_req *);
#define MP_LOCATE 7
extern  mp_locate_ret_t * mp_locate_1(mp_locate_arg_t *, CLIENT *);
extern  mp_locate_ret_t * mp_locate_1_svc(mp_locate_arg_t *, struct svc_req *);
extern int monitor_program_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define MP_NULL 0
extern  void * mp_null_1();
extern  void * mp_null_1_svc();
#define MP_STAT 1
extern  mp_stat_ret_t * mp_stat_1();
extern  mp_stat_ret_t * mp_stat_1_svc();
#define MP_REMOVE 2
extern  mp_status_ret_t * mp_remove_1();
extern  mp_status_ret_t * mp_remove_1_svc();
#define MP_PORTS 3
extern  mp_ports_ret_t * mp_ports_1();
extern  mp_ports_ret_t * mp_ports_1_svc();
#define MP_LIST_BINS_FILES 4
extern  mp_list_bins_files_ret_t * mp_list_bins_files_1();
extern  mp_list_bins_files_ret_t * mp_list_bins_files_1_svc();
#define MP_REMOVE2 5
extern  mp_status_ret_t * mp_remove2_1();
extern  mp_status_ret_t * mp_remove2_1_svc();
#define MP_SIZE 6
extern  mp_size_ret_t * mp_size_1();
extern  mp_size_ret_t * mp_size_1_svc();
#define MP_LOCATE 7
extern  mp_locate_ret_t * mp_locate_1();
extern  mp_locate_ret_t * mp_locate_1_svc();
extern int monitor_program_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_mp_uuid_t (XDR *, mp_uuid_t);
extern  bool_t xdr_mp_status_t (XDR *, mp_status_t*);
extern  bool_t xdr_mp_status_ret_t (XDR *, mp_status_ret_t*);
extern  bool_t xdr_mp_remove2_arg_t (XDR *, mp_remove2_arg_t*);
extern  bool_t xdr_mp_remove_arg_t (XDR *, mp_remove_arg_t*);
extern  bool_t xdr_mp_stat_arg_t (XDR *, mp_stat_arg_t*);
extern  bool_t xdr_mp_sstat_t (XDR *, mp_sstat_t*);
extern  bool_t xdr_mp_size_rsp_t (XDR *, mp_size_rsp_t*);
extern  bool_t xdr_mp_size_ret_t (XDR *, mp_size_ret_t*);
extern  bool_t xdr_mp_size_arg_t (XDR *, mp_size_arg_t*);
extern  bool_t xdr_mp_path_t (XDR *, mp_path_t*);
extern  bool_t xdr_mp_file_t (XDR *, mp_file_t*);
extern  bool_t xdr_mp_files_t (XDR *, mp_files_t*);
extern  bool_t xdr_mp_locate_rsp_t (XDR *, mp_locate_rsp_t*);
extern  bool_t xdr_mp_locate_ret_t (XDR *, mp_locate_ret_t*);
extern  bool_t xdr_mp_locate_arg_t (XDR *, mp_locate_arg_t*);
extern  bool_t xdr_mp_stat_ret_t (XDR *, mp_stat_ret_t*);
extern  bool_t xdr_mp_io_address_t (XDR *, mp_io_address_t*);
extern  bool_t xdr_mp_storio_mode_t (XDR *, mp_storio_mode_t*);
extern  bool_t xdr_mp_ports_t (XDR *, mp_ports_t*);
extern  bool_t xdr_mp_ports_ret_t (XDR *, mp_ports_ret_t*);
extern  bool_t xdr_mp_children_t (XDR *, mp_children_t*);
extern  bool_t xdr_mp_child_t (XDR *, mp_child_t*);
extern  bool_t xdr_bins_files_list_t (XDR *, bins_files_list_t*);
extern  bool_t xdr_mp_list_bins_files_ret_t (XDR *, mp_list_bins_files_ret_t*);
extern  bool_t xdr_mp_list_bins_files_arg_t (XDR *, mp_list_bins_files_arg_t*);

#else /* K&R C */
extern bool_t xdr_mp_uuid_t ();
extern bool_t xdr_mp_status_t ();
extern bool_t xdr_mp_status_ret_t ();
extern bool_t xdr_mp_remove2_arg_t ();
extern bool_t xdr_mp_remove_arg_t ();
extern bool_t xdr_mp_stat_arg_t ();
extern bool_t xdr_mp_sstat_t ();
extern bool_t xdr_mp_size_rsp_t ();
extern bool_t xdr_mp_size_ret_t ();
extern bool_t xdr_mp_size_arg_t ();
extern bool_t xdr_mp_path_t ();
extern bool_t xdr_mp_file_t ();
extern bool_t xdr_mp_files_t ();
extern bool_t xdr_mp_locate_rsp_t ();
extern bool_t xdr_mp_locate_ret_t ();
extern bool_t xdr_mp_locate_arg_t ();
extern bool_t xdr_mp_stat_ret_t ();
extern bool_t xdr_mp_io_address_t ();
extern bool_t xdr_mp_storio_mode_t ();
extern bool_t xdr_mp_ports_t ();
extern bool_t xdr_mp_ports_ret_t ();
extern bool_t xdr_mp_children_t ();
extern bool_t xdr_mp_child_t ();
extern bool_t xdr_bins_files_list_t ();
extern bool_t xdr_mp_list_bins_files_ret_t ();
extern bool_t xdr_mp_list_bins_files_arg_t ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_MPROTO_H_RPCGEN */
