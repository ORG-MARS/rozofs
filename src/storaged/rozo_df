#!/usr/bin/python
# -*- coding: utf-8 -*-

import sys
import os.path
import subprocess
import time
import re
import shlex
from optparse import OptionParser
import syslog
import datetime

rozofs_devices = []
#___________________________
# converts string <inBytes> to integer 
# in the unit given by <to>.
# <inBytes>  is 
# [<spaces>]<numeric>[{.|,}<numeric>][<spaces>]<unit>
# <unit> is {B|K|KB|M|MB|G|GB|T|TB|P|PB}
# <to> is <unit>
def common_convert_Bytes(inBytes,to="B"):
  inBytes = inBytes.replace(" ", "")

  if "." in inBytes:
    before = int(inBytes.split('.')[0])
    after  = inBytes.split('.')[1]
    unit   = re.split('(\d+)',after)[2]
    after  = re.split('(\d+)',after)[1]
  elif "," in inBytes:
    before = int(inBytes.split(',')[0])
    after  = inBytes.split(',')[1]
    unit   = re.split('(\d+)',after)[2]
    after  = re.split('(\d+)',after)[1]
  else:
    unit   = re.split('(\d+)',inBytes)[2]
    before = re.split('(\d+)',inBytes)[1]
    after = "0"

  if   len(after) == 1: after=int(after)*100
  elif len(after) == 2: after=int(after)*10
  elif len(after) == 3: after=int(after)

  if   unit == "KB" or unit == "K": val = (int(before)*1000 + after)
  elif unit == "MB" or unit == "M": val = (int(before)*1000 + after) * 1000
  elif unit == "GB" or unit == "G": val = (int(before)*1000 + after) * 1000000
  elif unit == "TB" or unit == "T": val = (int(before)*1000 + after) * 1000000000
  elif unit == "PB" or unit == "P": val = (int(before)*1000 + after) * 1000000000000
  else: val = int(before)
  
  if to == "K" or to =="KB": return val/1000
  if to == "M" or to =="MB": return val/1000000  
  if to == "G" or to =="GB": return val/1000000000
  if to == "T" or to =="TB": return val/1000000000000
  if to == "P" or to =="PB": return val/1000000000000000
  return val
#___________________________  
def common_bytes_with_unit(inBytes):
  if inBytes < 0: sign = "-"
  else:           sign = ""
  
  string="%s"%(inBytes)
  value = common_convert_Bytes(string,"B")

  if value < 1000: return "%s%4d  "%(sign,value)
  
  if value < 1000000:
    if value >= (100*1000): return "%s%4d K"%(sign,value/1000)
    if value >=  (10*1000): return "%s%2d.%1d K"%(sign,value/1000,(value % 1000) / 100)
    return "%s%1d.%2.2d K"%(sign,value/1000,(value % 1000) / 10)   
  
  if value < 1000000000:  
    if value >= (100*1000000): return "%s%4d M"%(sign,value/1000000)
    if value >=  (10*1000000): return "%s%2d.%1d M"%(sign,value/1000000,(value % 1000000) / 100000)
    return "%s%1d.%2.2d M"%(sign,value/1000000,(value % 1000000) / 10000)   
  
  if value < 1000000000000:  
    if value >= (100*1000000000): return "%s%4d G"%(sign,value/1000000000)
    if value >=  (10*1000000000): return "%s%2d.%1d G"%(sign,value/1000000000,(value % 1000000000) / 100000000)
    return "%s%1d.%2.2d G"%(sign,value/1000000000,(value % 1000000000) / 10000000)   
  
  if value < 1000000000000000:  
    if value >= (100*1000000000000): return "%s%4d T"%(sign,value/1000000000000)
    if value >=  (10*1000000000000): return "%s%2d.%1d T"%(sign,value/1000000000000,(value % 1000000000000) / 100000000000)
    return "%s%1d.%2.2d T"%(sign,value/1000000000000,(value % 1000000000000) / 10000000000)   
  
  if value < 1000000000000000000:  
    if value >= (100*1000000000000000): return "%s%4d P"%(sign,value/1000000000000000)
    if value >=  (10*1000000000000000): return "%s%2d.%1d P"%(sign,value/1000000000000000,(value % 1000000000000000) / 100000000000000)
  
  return "%s%1s.%2.2d P"%(sign,value/1000000000000000,(value % 1000000000000000) / 10000000000000)   


#___________________________________
def get_device_by_name(name):
  global rozofs_devices
  for dev in rozofs_devices:
    if dev.name == name: return dev
  return None
#___________________________________
def get_device_by_mount(mount):
  global rozofs_devices
  for dev in rozofs_devices:
    if dev.mount == mount: return dev
  return None
    
#____________________________________
class rozofs_device:

  def __init__(self, name, mount, free, total):
    global rozofs_devices
    global average

    self.name     = name
    self.mount    = mount
    self.free     = free
    self.old_free = free
    self.total    = total
    self.string   = None
    rozofs_devices.append(self)
    if self.name == "rozofs": 
      average = int(self.free)*int(100)/int(self.total)   

  def update(self, free, total):
   global average

   self.old_free = self.free
   self.free     = free
   self.total    = total
   if self.name == "rozofs": 
     average = int(self.free)*int(100)/int(self.total)   
      
  def display(self):
   global average
   global threshold
   global mini
   global maxi   
   percent = float(self.free)*float(100)/float(self.total)

   delta = int(self.total) * int(threshold)
   delta /= 100
   mini = int(average_free) - int(delta)
   maxi = int(average_free) + int(delta)
#   print "delta %s  mini %s maxi %s"%(delta,mini,maxi)
   
   
   if options.freeSpace == False:
     try:
       int(average)
     except:  
       options.freeSpace = True
   
   if int(self.free) == int(self.old_free):
     display_free = "%6s        "%(common_bytes_with_unit(self.free+"K"))
   elif int(self.free) > int(self.old_free):
     display_free = "%6s(+%6s)"%(common_bytes_with_unit(self.free+"K"),common_bytes_with_unit("%sK"%(int(self.free)-int(self.old_free))))
   else: 
     display_free = "%6s(-%6s)"%(common_bytes_with_unit(self.free+"K"),common_bytes_with_unit("%sK"%(int(self.old_free)-int(self.free))))

   LINE = "%12s  "%(self.name) 
   #
   # Compare % of free space
   #
   if options.freeSpace == False:
     if int(percent) == int(0):
       color = RED+BOLD+REVERSE
     elif float(percent) < int(5):
       color = RED+BOLD         
     elif (int(percent) < (int(average)-int(threshold))):
       color = YELLOW
     elif (int(percent) > (int(average)+int(threshold))):
       color = CYAN
     elif (int(percent) == int(good_percent)):
       color = BOLD  
     else:
       color = NORMAL          
     pc = "%5.1f%%"%(percent)
             
     LINE += color + pc + NORMAL + " %-17s"%(display_free) 

   #
   # Compare free space
   else:   
     if int(self.free) == int(self.old_free):
       display_free = "%6s        "%(common_bytes_with_unit(self.free+"K"))
     elif int(self.free) > int(self.old_free):
       display_free = "%6s(+%6s)"%(common_bytes_with_unit(self.free+"K"),common_bytes_with_unit("%sK"%(int(self.free)-int(self.old_free))))
     else: 
       display_free = "%6s(-%6s)"%(common_bytes_with_unit(self.free+"K"),common_bytes_with_unit("%sK"%(int(self.old_free)-int(self.free))))

     if int(percent) < int(5):
       color = RED+BOLD+REVERSE
     elif (int(self.free) < int(mini)):
       color = RED
     elif (int(self.free) > int(maxi)):
       color = NORMAL
     else:
       color = CYAN 
     LINE += "%5.1f%% "%(percent) + color + " %-17s"%(display_free) + NORMAL 
         
   LINE += "/ %7s  %s"%(common_bytes_with_unit(self.total+"K"), self.mount)   
   print LINE
   
      
def do_one_df():
  global average_free
  global good_percent

  total_free   = 0
  total_size   = 0
  total_device = 0
  
  now = datetime.datetime.now()
    
  string = "df "
  parsed = shlex.split(string)
  cmd = subprocess.Popen(parsed, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  for line in cmd.stdout:
    name    = line.split()[0]
    total   = line.split()[1]
    used    = line.split()[2]
    try: free    = "%s"%(int(total)-int(used))
    except: continue
    mount   = line.split()[5]
    if "rozofs_mover" in mount: continue
    if "export" in mount: continue
    if name == "rozofs":
      dev = get_device_by_mount(mount)
      if dev == None:
         rozofs_device(name, mount, free, total)
         rozofs_devices.sort(key=lambda k: k.mount)    
      else:
         dev.update(free,total)
      continue
    if "rozofs" in mount:
      dev = get_device_by_name(name)
      if dev == None:
         rozofs_device(name, mount, free, total)
         rozofs_devices.sort(key=lambda k: "%s"%(k.mount))
      else:
         dev.update(free,total)
      total_device += 1 
      total_free   += int(free)   
      total_size   += int(total)   
      continue
  average_free = int(total_free) /  int(total_device)
  good_percent = float(total_free)*100/float(total_size)
  
  print "____________________ %s ____________________%5.1f%%"%(now.strftime("%Y-%m-%d %H:%M:%S"),good_percent)
  if options.freeSpace == False:
    print "        NAME  " + CYAN + "   % " + NORMAL + "   FREE             /    SIZE  MOUNT POINT" 
  else:   
    print "        NAME     % " + CYAN + "   FREE             " + NORMAL + "/    SIZE  MOUNT POINT" 
      

RED='\033[91m\033[40m'
GREEN='\033[92m\033[40m'
YELLOW='\033[93m\033[40m'
BLUE='\033[94m\033[40m'
PURPLE='\033[95m\033[40m'
CYAN='\033[96m\033[40m'
WHITE='\033[97m\033[40m'

BOLD='\033[1m'
REVERSE='\033[7m'
NORMAL='\033[0m'
       
parser = OptionParser()
parser.add_option("-p","--period", action="store",type="string", dest="period", help="Periodicity of the command")
parser.add_option("-t","--threshold", action="store",type="string", dest="threshold", help="Tolerable difference in %")
parser.add_option("-f","--free", action="store_true",default=False, dest="freeSpace", help="Compare free space. default is to compare % of free space")
 
(options, args) = parser.parse_args()

threshold = int(4)        
period = int(0)
average_free = int(0)
good_percent = int(0)

if options.threshold != None:
  try: threshold = options.threshold
  except:
    print "Unexpected threshold value"
    sys.exit(-1)

if options.period != None:
  try: period = int(options.period)
  except:
    print "Unexpected period value"
    sys.exit(-1)

while True:
  do_one_df()
  for dev in rozofs_devices:  
    if dev.name == "rozofs": dev.display()
  for dev in rozofs_devices:  
    if dev.name != "rozofs": dev.display()
  if period == 0: sys.exit(0)
  time.sleep(int(period))

