#ifndef __storage_device_kpi_e2String_h__
#define __storage_device_kpi_e2String_h__
#ifdef __cplusplus
extern "C" {
#endif /*__cplusplus*/
#include <strings.h>

/*___________________________________________________________________
 
   Generated by enum2String.py 
   Date : Friday 2019 September 13, 17:41:18
   Command line : 
 ../../tools/enum2String.py -n storage_device_kpi_e -f storage_device_kpi.h -c 19 -r

  ____________________________________________________________________
*/

/*_________________________________________________________________
 * Builds a string from an integer value supposed to be within
 * the enumerated list storage_device_kpi_e
 *
 * @param x : value from storage_device_kpi_e to translate into a string
 *
 * The input value is translated into a string deduced from the enum
 * definition. When the input value do not fit any of the predefined
 * values, "??" is returned
 *
 * @return A char pointer to the constant string or "??"
 *_________________________________________________________________*/ 
static inline char * storage_device_kpi_e2String (const storage_device_kpi_e x) {
  switch(x) {
    case storage_device_kpi_read                 : return("read");
    case storage_device_kpi_write                : return("write");
    case storage_device_kpi_max                  : return("max");
    /* Unexpected value */
    default: return "??";
  }
}
/*_________________________________________________________________
 * Translate a string supposed to be within the enumerated list
 * storage_device_kpi_e to its integer value.
 *
 * @param s : the string to translate into an integer
 *
 * The input string is translated into its corresponding integer value.
 * When the input value do not fit any expected string -1 is returned.
 *
 * @return The integer value or -1
 *_________________________________________________________________*/ 
static inline int string2storage_device_kpi_e (const char * s) {
  if (strcasecmp(s,"read")==0)  	return storage_device_kpi_read;
  if (strcasecmp(s,"write")==0)  	return storage_device_kpi_write;
  if (strcasecmp(s,"max")==0)  	return storage_device_kpi_max;
  /* Unexpected value */
  return -1;
}

#ifdef	__cplusplus
}
#endif
#endif

