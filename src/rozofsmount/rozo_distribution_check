#!/usr/bin/python
# -*- coding: utf-8 -*-

import sys
import os.path
import subprocess
import time
import re
import shlex


clusters = []

#____________________________________
# Class sid
#____________________________________
class cluster:
  def __init__(self, cid): 
    self.cid = cid
    self.nbFiles = 0
    self.sidMax = 0
    self.inverse=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    self.forward=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    self.spare=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    clusters.append(self)
  	
  @staticmethod
  def get_cluster(cid):
    global clusters
    for c in clusters: 
	  if cid == c.cid: return c
    cluster(cid)
    for c in clusters: 
	  if cid == c.cid: return c	  
    return None
	
  def add_file(self,dist):
    self.nbFiles = self.nbFiles + 1
    nb=int(0)
    for id in dist.split('-'):
      id=int(id)
      if id > self.sidMax: self.sidMax = id
      if nb<inv :  
        self.inverse[id] = self.inverse[id] +1
      if nb<fwd :  
        self.forward[id] = self.forward[id] +1
      if nb>=fwd : 
        self.spare[id] = self.spare[id] +1
      nb=nb+1
	  
  @staticmethod
  def display_cluster():  
    for c in  clusters: 	
      i = 1
      print "\n  %s files in cluster %d"%(c.nbFiles,int(c.cid))
      print "   ____ _______ _______ _______"
      print "  |SID |  Read | Write | Spare |"
      print "  |____|_______|_______|_______|"
      while i <= c.sidMax:
        print "  | %2d | %5d | %5d | %5d |"%(i,c.inverse[i],c.forward[i],c.spare[i])
        i=i+1
      print "  |____|_______|_______|_______|"

#___________________________________________    

if len(sys.argv) < 2:
  path=os.getcwd()
else:
  path=sys.argv[1]
  if path[0] != '/':path="%s/%s"%(os.getcwd(),path)
path=os.path.abspath(path)

layout=255
string="attr -g rozofs %s"%(path)
parsed = shlex.split(string)
cmd = subprocess.Popen(parsed, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
for line in cmd.stdout:
  if not "LAYOUT" in line: continue
  layout=int(line.split(':')[1])
  break
  
if layout == 255:
  print "%s seems not to be a mounted RozoFS path"%(path) 
  sys.exit(1)
   
if layout == 0:
  inv=2
  fwd=3
  safe=4
elif layout == 1:     
  inv=4
  fwd=6
  safe=8
elif layout == 2:
  inv=8
  fwd=12
  safe=16
  
nbFiles    = int(0)
nbSubFiles = int(0)
  
sidMax=int(0)

for f in os.listdir(path):  

  isFile  = False

  string="attr -g rozofs %s/%s"%(path,f)
  parsed = shlex.split(string)
  cmd = subprocess.Popen(parsed, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

  for line in cmd.stdout:

    if isFile == False:
      try:
        if line.split()[0] != "MODE": continue
        if line.split()[2] != "REGULAR": break
        isFile = True
        nbFiles += int(1)
        cid = int(0)
      except: pass
      continue
        
    if "CLUSTER" in line: 
      cid = int(line.split(':')[1])
      continue
           
    if not "STORAGE" in line: continue
    if cid == int(0): continue           
    
    dist = line.split(':')[1]
    c = cluster.get_cluster(cid)
    c.add_file(dist)
    nbSubFiles += int(1)

print "%s files / %s subfiles under %s"%(nbFiles,nbSubFiles,path)
cluster.display_cluster()
